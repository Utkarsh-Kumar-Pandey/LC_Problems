// My first approach
// O(n^2) TC 

class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[i] == nums[j] && i < j) {
                    count += 1;
                }
            }
        }
        return count;
    }
};

// Using map to count the occurrences of numbers.
// Example: [1, 2, 3, 1, 1, 3]
/*
Initially, the map is empty.

- First iteration [nums[i] = 1], so count remains 0.
- Second iteration [nums[i] = 2], so count remains 0.
- Third iteration [nums[i] = 3], so count remains 0.

- In the fourth iteration, 1 occurs again; it is the first repetition. Therefore, this gets added, resulting in count = 1.
- In the fifth iteration, 1 occurs again; it is the second repetition. Therefore, this gets added, resulting in count = 3. (count += 2 for 1 now)
- In the sixth iteration, 3 occurs again; it is the first repetition. Therefore, this gets added, resulting in count = 4. (count += 1 for 3 now)
*/

class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int count = 0;
        unordered_map<int, int> mapp;

        for (int i = 0; i < nums.size(); i++) {
            count += mapp[nums[i]]++;
        }

        return count;
    }
};

// Using a formula for valid pairs through the occurence of number.
// For the occurences of numbers we come upto a formula which let us achieve this answer.
// p tells us number of combinations that can be created .
class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int count = 0;
        unordered_map<int, int> ans;
        for (int i = 0; i < nums.size(); i++) {

            ans[nums[i]]++;
        }
        for (auto it : ans) {
            int p = it.second;
            count += (p * (p - 1)) / 2;
        }
        return count;
    }
};